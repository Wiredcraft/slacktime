;; Analyzed by ClojureScript 1.7.170
{:name time-plan.devcards.core, :doc nil, :excludes #{}, :use-macros {testing cljs.test, async cljs.test, go cljs.core.async.macros, alt! cljs.core.async.macros, is cljs.test, defui om.next, deftest devcards.core, dom-node devcards.core, defcard devcards.core}, :require-macros {tst cljs.test, mount mount.core, mount.core mount.core, cljs.core.async.macros cljs.core.async.macros, devcards.core devcards.core, dom om.dom, om.dom om.dom, dc devcards.core, cljs.test cljs.test, sablono.core sablono.core, cljs.pprint cljs.pprint, om om.next, om.next om.next}, :uses {ago cljs-time.core, minutes cljs-time.core, timeout cljs.core.async, pprint cljs.pprint, <! cljs.core.async, close! cljs.core.async, unparse cljs-time.format, chan cljs.core.async, r time-plan.cljs.core, from-now cljs-time.core, TimezonesComponent time-plan.cljs.core, now cljs-time.core, formatter cljs-time.format, seconds cljs-time.core, >! cljs.core.async, plus cljs-time.core, hours cljs-time.core, put! cljs.core.async}, :requires {tst cljs.test, t cognitect.transit, mount mount.core, mount.core mount.core, dom om.dom, goog.net.XhrIo goog.net.XhrIo, om.dom om.dom, cljs.test cljs.test, cljs.core.async cljs.core.async, datascript.core datascript.core, cljs-time.core cljs-time.core, cognitect.transit cognitect.transit, dt cljs-time.core, sablono.core sablono.core, cljs.pprint cljs.pprint, om om.next, time-plan.cljs.core time-plan.cljs.core, dtf cljs-time.format, om.next om.next, cljs-time.format cljs-time.format, d datascript.core}, :imports nil}